<!DOCTYPE html>
<html>

<head>
    <meta charset="UTF-8">
    <title>类中方法this的指向</title>
</head>

<body>
    <script type="text/javascript">
        class Person {
            constructor(name, age) {
                this.name = name
                this.age = age
            }
            speak() {
                // speak方法放在了 类的原型对象上 通过实例调用
                console.log(this)
            }
        }
        const p1 = new Person('Tom', 18)
        p1.speak() // 通过实例调用speak方法
        const x = p1.speak // 赋值语句，并没有调用speak函数，只是给function多了一个指向
        x() // 这里是undefined 因为这里是直接调用
        // 这里的x是window调用的，只是将函数体（执行的各种流程）给了x
        // 同时由于已经在局部开了严格模式，导致它不敢指向window，所以指向了undefined
        // 解决方法：要么用箭头函数定义事件，要么就是用bind

        // 原生js里面谁调用该函数该函数的this就是指向谁。所以只能用箭头函数，因为箭头函数没有this，所以会往外找，就找到了这个类的this实例
        // bind 有两个功能：生成一个新的函数；改变函数的this，改变this指向但不会调用函数，apply和call都会调用
        // 所以，如果写demo.bind(xx),尽管新函数里面有consolelog，但是不会执行
        // 在class里写：this.demo = this.demo.bind(this)
        // 赋值语句右边：前者的this是实例对象，this.demo还没有实例呢，bind之后搞出了一个实例对象，并且里面的函数对象就是这个实例对象
        // 简单理解就是：原型方法都挂载到了私有上，注意这个时候实例里的demo不是原型里的demo，名字一样内容一样而已，存储在另一个位置
        
    </script>
</body>
</html>
